SELECT tablename, indexname, indexdef
FROM pg_indexes
WHERE schemaname = 'public'
ORDER BY tablename;

ALTER TABLE city DROP CONSTRAINT IF EXISTS city_pkey CASCADE;
ALTER TABLE country DROP CONSTRAINT IF EXISTS country_pkey CASCADE;
ALTER TABLE economy DROP CONSTRAINT IF EXISTS economy_pkey CASCADE;

1. CREATE INDEX statements:

CREATE INDEX economy_gdp_btree_index ON economy (gdp);
CREATE INDEX economy_country_code_hash_index ON economy USING HASH (country_code);
CREATE INDEX city_country_code_hash_index ON city USING HASH (country_code);

EXPLAIN SELECT c.name, ct.name, c.population, e.gdp, e.inflation
FROM city c
NATURAL JOIN country ct
NATURAL JOIN economy e
WHERE e.gdp > 100000;

DROP INDEX economy_gdp_btree_index;
DROP INDEX economy_country_code_hash_index;
DROP INDEX city_country_code_hash_index;

2. Explanation for why I chose each of the indexes:

a) economy_gdp_btree_index: B-tree index for the inequality condition gdp > 100000. B-tree indexes are required for range queries since hash indexes don't support them.
b) economy_country_code_hash_index and city_country_code_hash_index: Hash indexes for join conditions. These provide faster lookups for equality-based joins between tables.

3. The output of EXPLAIN for the query after the indexes were added:

Nested Loop  (cost=9.15..98.14 rows=1 width=43)
  ->  Hash Join  (cost=9.15..98.10 rows=1 width=30)
        Hash Cond: (((c.name)::text = (ct.name)::text) AND (c.population = (ct.population)::double precision))
        ->  Seq Scan on city c  (cost=0.00..59.10 rows=3410 width=20)
        ->  Hash  (cost=5.46..5.46 rows=246 width=14)
              ->  Seq Scan on country ct  (cost=0.00..5.46 rows=246 width=14)
  ->  Index Scan using economy_country_code_hash_index on economy e  (cost=0.00..0.03 rows=1 width=19)
        Index Cond: ((country_code)::text = (c.country_code)::text)
        Filter: (gdp > '100000'::double precision)


4. Whether the indexes caused a performance increase for the query:

Yes, there was a speed up. The execution plan shows the use of the economy_country_code_hash_index which improves the join performance. However, the optimizer has chosen to apply the gdp filter after the index scan rather than using the economy_gdp_btree_index directly, suggesting that for this data distribution, accessing by country_code first is more efficient.
